#!/bin/bash
source helper_functions

clear # clear terminal window
echo  '                                              _         '
echo  '                                             | |        '
echo  '     __ _  __   __   ___  ___  _    _ __   __| | ___    '
echo  '   / _  |/ _ \/ _ \|  _ \  _ \ | | |  _ \ / _  |/ _ \   '
echo  '  | (_| |  __/ (_) | | | | | | |_| | | | | (_| | (_) |  '
echo  '   \__, |\___|\___/|_| |_| |_|\__,_|_| |_|\__,_|\___/   '
echo  '    __/ |                                               '
echo  '   |___/                                                '
echo
echo ============================================================================
echo ENTORNO AUTOMATIZADO DE GEOPROCESAMIENTO: TELEDETECCION, SIG Y MODELAMIENTO
echo Bienvenido, $USER!
echo
echo ============================================================================
echo WELCOME TO AUTOMATED GEOPROCESSING WITH ORFEO TOOLBOX: REMOTE SENSING FOR THE AMAZON
echo "***************************************************************"
echo "* @source   : AUTOMATED GEOPROCESSING - IMAGE_MASTER          *"
echo "* @tool     : VHR RESOLUTION IMAGE PROCESSING                 *"
echo "* @autor    : CHRISTOPHER TURNER                              *"
echo "* @e-mail   : CLTURNER23@gmail.com                            *"
echo "* @revision : 0.0 - 10/08/2023                                *"
echo "* ............................................................*"
echo "***************************************************************"
echo

# Check to see if using geomundo in debug mode to print
#    varible values at the begining and end of each script
DEBUG=$1
if [[ $DEBUG == "d" ]]; then
    DEBUG=$DEBUG
else
    DEBUG="Not_Debug_mode"
fi

# Function to request the absolute path for the output directory
# If not a DIR call get_output_dir again
get_output_dir () {
    echo
    echo Please enter the absolute path to your preferred output directory
    echo
    read OUTPUT_DIR
    if [ -d $OUTPUT_DIR ]
    then
	OUTPUT_DIR=$OUTPUT_DIR
    else
	echo
	echo That was not an existing directory
	get_output_dir
    fi
}

# Function to get the image type from the user
#  Call get_image_type if not a choice in menu
get_image_type () {
    echo
    echo "What type of image would you like to process"
    echo "1. Peru Sat"
    echo "2. Planet"
    echo "3. Worldview"
    echo "4. Geoeye"
    echo "5. Sentinel"
    echo "6. Custom"
    echo
    echo "Choose and image type and press [ENTER]:"
    read IMAGE_TYPE

    if [ "$IMAGE_TYPE" = 1 ] || [ "$IMAGE_TYPE" = 2 ] || [ "$IMAGE_TYPE" = 3 ] || [ "$IMAGE_TYPE" = 4 ] || [ "$IMAGE_TYPE" = 5 ];
    then
	IMAGE_TYPE=$IMAGE_TYPE
    else
	echo
	echo THAT WAS NOT AN IMAGE CHOICE
	echo
	get_image_type
    fi

    BAND_PAN=0
    BAND_BLUE=0
    BAND_GREEN=0
    BAND_RED=0
    BAND_NIR=0
    BAND_CA=0
    BAND_RE=0
    BAND_SWIR=0

        # Check for image type and set corresponding variables for bands
    if [ "$IMAGE_TYPE" = 1 ]; then
        IMAGE_TYPE="PSAT"
        BAND_PAN=1
        BAND_BLUE=2
        BAND_GREEN=3
        BAND_RED=4
        BAND_NIR=5
    elif [ "$IMAGE_TYPE" = 2 ]; then
        IMAGE_TYPE="PLNT"
        BAND_BLUE=1
        BAND_GREEN=2
        BAND_RED=3
        BAND_NIR=4
    elif [ "$IMAGE_TYPE" = 3 ]; then
        IMAGE_TYPE="WVIW"
        BAND_PAN=1
        BAND_BLUE=2
        BAND_GREEN=3
        BAND_RED=4
        BAND_NIR=5
    elif [ "$IMAGE_TYPE" = 4 ]; then
        IMAGE_TYPE="GEYE"
        BAND_PAN=1
        BAND_BLUE=2
        BAND_GREEN=3
        BAND_RED=4
        BAND_NIR=5
    elif [ "$IMAGE_TYPE" = 5 ]; then
        IMAGE_TYPE="SENT"
        BAND_CA=1
        BAND_BLUE=2
        BAND_GREEN=3
        BAND_RED=4
        BAND_RE=5
        BAND_NIR=6
        BAND_SWIR=7
    elif [ "$IMAGE_TYPE" = 6 ]; then
        IMAGE_TYPE="CUSTOM"
        # Set your custom band variables
        get_band_numbers
    fi

}

# Get the the process or processes requested by the user
get_process_string () {
    echo
    echo Please choose a process or processes
    echo
    echo "To add a Radiometric Indice layer, a custom layer with band math and"
    echo "  a extract a Region of interest"
    echo EXAMPLE: 1 3 8 
    echo
    echo "1. Add radiometric indices."
    echo "2. Add by band math (add a band to an image)."
    echo "3. Band math (create a single-band image)."
    echo "4. Remove bands."
    echo "5. Concatenate."
    echo "6. Large-scale mean shift."
    echo "7. Mosaic."
    echo "8. Extract ROI (region of interest)."
    echo "9. Unzip files."
    echo "10. Cloud detector."
    echo "11. Mines, roads, and deforestation workflow."
    echo "12. Mines, roads, and deforestation ROI workflow."
    echo
    read -ra PROCESS_ARR

     # Check if the user provided any input
    if [ "${#PROCESS_ARR[@]}" -eq 0 ]; then
        clear
        echo "YOU DID NOT ENTER ANY PROCESSES"
        echo "PLEASE ENTER ONE OR MORE NUMBERS CORRESPONDING TO PROCESSES"
        get_process_string
    fi

    # Loop through the user input and check if all values are within the range 1-12
    for num in "${PROCESS_ARR[@]}"; do
        if ! [[ "$num" =~ ^[1-9]$|^1[0-2]$ ]]; then
            echo
            echo "INVALID INPUT: $num"
            echo "PLEASE ENTER NUMBERS BETWEEN 1 AND 12"
            echo
            get_process_string
        fi
    done

    # Convert the array to a space-separated string for further processing
    PROCESS=$(printf "%s " "${PROCESS_ARR[@]}")
    # Replaces spaces " " with "%" from the PROCESS variable so the chain
    #   can be succesfiully passed to the multiprocess file
    PROCESS=$( echo $PROCESS | tr " " "%" )
}

get_image_paths () {
    echo
    echo "PLEASE ENTER THE ABSOLUTE PATH TO YOUR IMAGE/IMAGES OR A DIRECTORY OF FILES"
    echo
    read PATH_TO_IMAGES

    if [[ -d $PATH_TO_IMAGES ]]; then
        INPUT_DIR=$PATH_TO_IMAGES
        for file in `ls $PATH_TO_IMAGES`; do
            if [[ $file == *.tif* && $file != *tif.xml ]]; then
                file_string="$file_string $PATH_TO_IMAGES/$file"
            elif [[ $file == *.jp2* ]]; then
                file_string="$file_string $PATH_TO_IMAGES/$file"
            elif [[ $file == *.zip* && $PROCESS -eq 11 || $PROCESS -eq 12 ]] || [[ $PROCESS =~ 9 ]]; then
                file_string="$file_string $PATH_TO_IMAGES/$file"
            fi
        done
        PATH_TO_IMAGES=$file_string
    else
        INPUT_DIR="file_paths_were_entered_not_a_directory"
    fi

    char=" "
    NUM_PATHS=$( echo "${PATH_TO_IMAGES}" | awk -F"${char}" '{print NF-1}' )
    NUM_PATHS=$((NUM_PATHS+1))

    PATH_TO_IMAGES=$( echo $PATH_TO_IMAGES | tr " " "%")
}


get_output_dir
get_image_paths
get_image_type
get_process_string


# If not using an automated workflow set the WORKFLOW variable to 0
if [ -z "$WORKFLOW" ]; then
  WORKFLOW=0
fi


if [ $DEBUG = "d" ]; then
    get_debug "ending geomundo"
fi

# Pass all the user requirements to the multiprocess script                                                                                                                                                   
./multi_process "$DEBUG" "$OUTPUT_DIR" "$INPUT_DIR" "$IMAGE_TYPE" "$PROCESS" "$PATH_TO_IMAGES" "$NUM_PATHS" "$WORKFLOW" "$BAND_PAN" "$BAND_BLUE" "$BAND_GREEN" "$BAND_RED" "$BAND_NIR" "$BAND_CA" "$BAND_RE" "$BAND_SWIR"

