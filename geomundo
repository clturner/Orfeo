#!/bin/bash

clear # clear terminal window
echo  '                                              _         '
echo  '                                             | |        '
echo  '     __ _  __   __   ___  ___  _    _ __   __| | ___    '
echo  '   / _  |/ _ \/ _ \|  _ \  _ \ | | |  _ \ / _  |/ _ \   '
echo  '  | (_| |  __/ (_) | | | | | | |_| | | | | (_| | (_) |  '
echo  '   \__, |\___|\___/|_| |_| |_|\__,_|_| |_|\__,_|\___/   '
echo  '    __/ |                                               '
echo  '   |___/                                                '
echo
echo ============================================================================
echo ENTORNO AUTOMATIZADO DE GEOPROCESAMIENTO: TELEDETECCION, SIG Y MODELAMIENTO
echo Bienvenido, $USER!
echo
echo ============================================================================
echo WELCOME TO AUTOMATED GEOPROCESSING WITH ORFEO TOOLBOX: REMOTE SENSING FOR THE AMAZON
echo "***************************************************************"
echo "* @source   : AUTOMATED GEOPROCESSING - IMAGE_MASTER          *"
echo "* @tool     : VHR RESOLUTION IMAGE PROCESSING                 *"
echo "* @autor    : CHRISTOPHER TURNER                              *"
echo "* @e-mail   : CLTURNER23@gmail.com                            *"
echo "* @revision : 0.0 - 29/11/2018                                *"
echo "* ............................................................*"
echo "***************************************************************"
echo

# Check to see if using geomundo in debug mode to print
#    varible values at the begining and end of each script
DEBUG=$1
if [[ $DEBUG == "d" ]]; then
    DEBUG=$DEBUG
else
    DEBUG="Not_Debug_mode"
fi

# Function to request the absolute path for the output directory
get_output_dir () {
    echo PLEASE ENTER THE ABSOLUTE PATH TO YOUR PREFERED OUTPUT DIRECTORY
    echo
    read OUTPUT_DIR
    if [ -d $OUTPUT_DIR ]
    then
	OUTPUT_DIR=$OUTPUT_DIR
    else
	echo
	echo THAT WAS NOT AN EXSISTING DIRECTORY
	get_output_dir
    fi
}

# Function to get the image type from the user
get_image_type () {
    clear
    echo "WHAT TYPE OF IMAGE WOULD YOU LIKE TO PROCESS"
    echo "1. PERU SAT"
    echo "2. PLANET"
    echo "3. WORLDVIEW"
    echo
    echo "Choose and image type and press [ENTER]:"
    read IMAGE_TYPE
    if [ "$IMAGE_TYPE" = 1 ] || [ "$IMAGE_TYPE" = 2 ] || [ "$IMAGE_TYPE" = 3 ]
    then
	IMAGE_TYPE=$IMAGE_TYPE
    else
	clear
	echo THAT WAS NOT AN IMAGE CHOICE
	echo
	get_image_type
    fi

    # Change image type to text for future file names
    if [ "$IMAGE_TYPE" = 1 ]
    then
	IMAGE_TYPE="PSAT"
    elif [ "$IMAGE_TYPE" = 2 ]
    then
	IMAGE_TYPE="PLNT"
    elif [ "$IMAGE_TYPE" = 3 ]
    then
	IMAGE_TYPE="WVIW"
    fi
    clear
}

# Get the the process or processes requested by the user
get_process_string () {
echo CHOOSE A PROCESS
echo
echo PLEASE CHOOSE A PROCESS
echo
echo EXAMPLE: 1 3 7
echo
echo " 1. ADD RADIO METRIC INDICES"
echo " 2. ADD BY BAND MATH (ADD A BAND TO AN IMAGE)"
echo " 3. BAND MATH (CREATE A SINGLE BAND IMAGE)"
echo " 4. REMOVE BANDS"
echo " 5. CONCATENATE"
echo " 6. LARGE SCALE MEAN SHIFT"
echo " 7. MOSAIC"
echo " 8. EXTRACT ROI (REGION OF INTEREST)"
echo " 9. UNZIP FILES"
echo "10. CLOUD DETECTOR"
echo "11. PLANET: MINES ROADS & DEFORESTATION WORKFLOW"
echo "12. PLANET: MINES ROADS & DEFORESTATION ROI WORKFLOW"
echo
read PROCESS
# If user presses enter without gioving a process
if [ -z $PROCESS ];
then
    clear
    echo YOU DID NOT ENTER A PROCESS
    echo
    echo PLEASE ENTER A NUMBER OR NUMBERS CORRESPONDING TO A PROCESSES
    echo
    echo EXAMPLE 1 3 7
    echo
    get_process_string
else
    # Loop the process string entered by the user
    for num in $(echo $PROCESS | sed "s/%/ /g");
    do
	# Check if any value in process string is char and not a number
	# If incorrect value given ask user create a new process string
        re='[a-zA-Z]'
	if [[ "$num" =~ $re ]];
	then
	    clear
	    PROCESS=$( echo $PROCESS | tr "%" " " )
	    echo THE ENTRY $num IN YOUR PROCESS STRING, $PROCESS, DOES NOT CORRESPOND TO A PROCESS
	    echo
	    echo PLEASE ENTER ONLY A NUMBER OR NUMBERS CORRESPONDING TO A PROCESSES
	    echo
	    get_process_string
	# Check if number in process string corresponds to a process
        # If incorrect value given ask user create a new process string
        elif [ "$num" -lt 1 ] || [ "$num" -gt 12 ];
        then
	    clear
	    PROCESS=$( echo $PROCESS | tr "%" " " )
            echo YOU ENTERED $num INTO YOUR PROCESS STRING $PROCESS
	    echo
	    echo PLEASE ENTER ONLY A NUMBER OR NUMBERS CORRESPONDING TO A PROCESSES
	    echo
	    get_process_string
        fi
    done
    # Check if any of the process numbers are an automated workflow
    # If there are no automated workflows in process string set $WORKFLOW=0
    for num in $PROCESS;
    do
	if [ $num -eq 11 ] || [ $num -eq 12 ];
	then
            WORKFLOW=$num
	    break
	else
            WORKFLOW=0
	fi
    done
fi
# Replaces spaces " " with "%" from the PROCESS variable so the chain
#   can be succesfiully passed to the multiprocess file
PROCESS=$( echo $PROCESS | tr " " "%" )
}

get_output_dir
get_image_type
get_process_string

clear
# IF PATH_TO_IMAGES IS A DIRECTORY: check that 1 or more tif are in directory
echo
echo PLEASE ENTER THE ABSOLUTE PATH TO YOUR IMAGE/IMAGES OR A DIRECTORY OF FILES
echo
read PATH_TO_IMAGES

if [[ -d $PATH_TO_IMAGES ]]; then
    INPUT_DIR=$PATH_TO_IMAGES
    for file in `ls $PATH_TO_IMAGES`;
    do
        if [[ $file == *.tif* && $file != *tif.xml ]];
        then
            file_string="$file_string $PATH_TO_IMAGES/$file"
	elif  [[ $file == *.zip* && $PROCESS -eq 11 || $PROCESS -eq 12 ]] || [[ $PROCESS =~ 9 ]];
	then
	    file_string="$file_string $PATH_TO_IMAGES/$file"
        fi
    done
    PATH_TO_IMAGES=$file_string
fi

# Count the number of image paths from the Directory or the number of
#    absolute image paths entered by the user
char=" "
NUM_PATHS=$( echo "${PATH_TO_IMAGES}" | awk -F"${char}" '{print NF-1}' )
NUM_PATHS=$((NUM_PATHS+1))

# Translate all spaces on image paths to % delimited string for  
PATH_TO_IMAGES=$( echo $PATH_TO_IMAGES | tr " " "%")


if [ $DEBUG = "d" ]; then
    echo
    echo $DEBUG
    echo $OUTPUT_DIR
    echo $INPUT_DIR
    echo $IMAGE_TYPE
    echo $PROCESS
    echo $PATH_TO_IMAGES
    echo $NUM_PATHS
    echo $WORKFLOW
    echo gemundo end
    read sjkdjcodsg
fi

# Pass all the user requirements to the multiprocess script
multi_process $DEBUG $OUTPUT_DIR $INPUT_DIR $IMAGE_TYPE $PROCESS $PATH_TO_IMAGES $NUM_PATHS $WORKFLOW
